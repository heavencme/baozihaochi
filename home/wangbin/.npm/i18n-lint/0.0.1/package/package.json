{"name":"i18n-lint","version":"0.0.1","description":"Lint HTML and template source files for hardcoded (untranslated) strings","homepage":"https://jwarby.github.io/i18n-lint","private":true,"preferGlobal":true,"directories":{"man":"doc/man"},"bin":{"i18n-lint":"./bin/i18n-lint"},"main":"lib/i18n-lint.js","scripts":{"test":"jshint bin/ lib/ test/ && ./node_modules/.bin/mocha --recursive","coverage":"istanbul cover _mocha -- -R spec --recursive"},"author":{"name":"James Warwood","email":"james.duncan.1991@googlemail.com","url":"https://github.com/jwarby"},"contributors":[],"repository":{"type":"git","url":"git+https://github.com/jwarby/i18n-lint.git"},"license":"MIT","bugs":{"url":"https://github.com/jwarby/i18n-lint/issues"},"dependencies":{"chalk":"^1.0.0","commander":"^2.0.0","glob":"^5.0.0","htmlparser2":"^3.0.0","lodash":"^3.0.0","node.extend":"^1.0.0"},"devDependencies":{"chai":"^3.0.0","coveralls":"^2.0.0","hooker":"^0.2.0","istanbul":"^0.3.0","jshint":"^2.0.0","mocha":"^2.0.0","mocha-lcov-reporter":"0.0.2","strip-ansi":"^3.0.0"},"keywords":["hardcoded","strings","i18n","translation","i18n-lint","lint","untranslated","detect"],"engines":{"node":">=0.8.0"},"config":{"blanket":{"pattern":[""],"data-cover-never":["node_modules","tests"]}},"man":["/tmp/npm-20469-3f0d8533/git-cache-4b84860e/0a06373c0d880047ad680239c103d60ed414efc1/doc/man/i18n-lint.1"],"gitHead":"0a06373c0d880047ad680239c103d60ed414efc1","readme":"# i18n-lint [![GitHub version](https://badge.fury.io/gh/jwarby%2Fi18n-lint.svg)](http://semver.org/spec/v2.0.0.html)\n> Detect possible instances of untranslated strings being used in HTML and HTML-derived template languages\n\n[![Build Status](https://secure.travis-ci.org/jwarby/i18n-lint.png?branch=master)](https://travis-ci.org/jwarby/i18n-lint)\n[![Dependency Status](https://david-dm.org/jwarby/i18n-lint.svg?style=flat)](https://david-dm.org/jwarby/i18n-lint)\n[![devDependency Status](https://david-dm.org/jwarby/i18n-lint/dev-status.svg?style=flat)](https://david-dm.org/jwarby/i18n-lint#info=devDependencies)\n[![Coverage Status](https://coveralls.io/repos/jwarby/i18n-lint/badge.svg?branch=master&service=github)](https://coveralls.io/github/jwarby/i18n-lint?branch=master)\n\n`i18n-lint` is a tool for detecting hardcoded (untranslated) strings in HTML and template source files.  It can be used a CLI utility, or as library.\n`i18n-lint` detects instances where a HTML element's text node or certain attributes look like a hardcoded string.\n\nSee <https://jwarby.github.io/i18n-lint/> for the full documentation and demos.\n\n![i18n-lint screenshot](screenshot.png)\n\n## Getting started\n\n### Installing\n\nInstall using npm:\n\n```shell\n  $ npm install -g jwarby/i18n-lint\n```\n\nInstalling globally will give you access to the `i18n-lint` binary from anywhere.\n\n## Documentation\n\nSee <https://jwarby.github.io/i18n-lint/> for the full documentation.\n\n### CLI\n\nThe CLI program is called `i18n-lint`, and will be available once `i18n-lint` has been installed globally.\n\nUsage:\n\n```shell\n  $ i18n-lint [OPTIONS] <file ...>\n```\n\n#### Program help and information\n\n- Run `i18n-lint --help` or `i18n-lint -h` to display help output and then exit\n- Run `i18n-lint --version` or `i18n-lint -V` to display version and then exit\n- Run `man i18n-lint` on systems which support `man` to view the Linux manual page\n\n#### Linting files\n\nTo lint a file, call `i18n-lint <file>`:\n\n```shell\n  $ i18n-lint some_file.html\n```\n\nYou can use a glob pattern too:\n\n```shell\n  $ i18n-lint app/views/**/*.html\n```\n\n#### Options\n\n##### `-h, --help`\n\nDisplay help and then exit\n\n##### `-V, --version`\n\nDisplay version information and then exit\n\n##### `-t, --template-delimiters <delimiters>`\n\nSet the template delimiters which the source files use.  The value should be the start and\nend delimiters, separated by a comma.  For example, if running\n`i18n-lint` against template files which use a Mustache-like syntax, use the following:\n\n```shell\n  $ i18n-lint -t \"{{,}}\" views/**/*.hbs\n```\n\nSimilarly, but for EJS-syntax:\n\n```shell\n  $ i18n-lint -t \"<%,%>\" views/**/*.ejs\n```\n\n##### `-a, --attributes <attributes>`\n###### default: `alt,placeholder,title`\n\nA comma-separated list of which HTML attributes should be checked.\n\n##### `-i, --ignore-tags <tags>`\n###### default: `style,script`\n\nA comma-separated list of HTML tags to ignore when searching for hardcoded strings.\n\n##### `-r, --reporter <reporter>`\n###### default: `default`\n\nThe reporter to use when outputting information.  The reporters follow the same structure as\nJSHint reporters, and the `i18n-lint` library reports error in the same manner as JSHint - this\nmeans you can use any existing JSHint reporters as reporters for `i18n-lint`!\n\nThere are 3 built-in reporters that get shipped with `i18n-lint`: `default`, `unix` and `json`.\n\nTo write your own reporters, look to `lib/reporters/*.js` as a starting point.\n\n##### `--exclude <patterns>`\n\nA comma-separated list of file patterns to exclude, such as `'docs/,ignored.html'`.\n\n##### `--color/--no-color`\n\nMaintain/turn off colored output.  For more info, see <https://www.npmjs.com/package/chalk#chalk-supportscolor>.\n\n#### Exit Status\n\n- `0`: if everything went OK, and no hardcoded strings were found\n- `1`: if hardcoded strings were found\n- `64`: command-line usage error, e.g. no input files provided (`[EX_USAGE]`)\n- `66`: cannot open input, e.g. input files I/O error, specified reporter file does not exist (`[EX_NOINPUT]`)\n- `70`: internal software error (`[EX_SOFTWARE]`)\n\n#### Colored Output\n\nTo maintain colored output, run `i18n-lint` with the `--color` flag:\n\n```shell\n  $ i18n-lint --color **/*.html | less -R\n```\n\n### Library\n\nTo use `i18n-lint` as a library, install it locally and `require` it in your projects:\n\n```shell\n  $ npm install --save-dev i18n-lint\n```\n\n```javascript\nvar I18nLint = require('i18n-lint');\n\nvar errors = I18nLint('some_file.ejs', {\n  templateDelimiters: ['<%','%>'],\n  attributes: ['title', 'alt', 'data-custom-attr']\n});\n```\n\nIf you want to scan a string instead of reading in a file, you can use the `scan` function:\n\n```javascript\nvar I18nLint = require('i18n-lint');\n\nvar context = '<h1>Some hardcoded string</h1>\\n<br>\\n<p>\\ncontent not translated</p>';\n\nvar options = {\n  // ...snip...\n};\n\nvar errors = I18nLint.scan(context, options);\n```\n\nThe scan function can also accept a `fileName` parameter:\n\n```javascript\nvar I18nLint = require('i18n-lint');\n\nvar stdin = '';\n\n// Read stdin stream\n// ...snip...\n\n// Once stdin has finished...\nvar errors = I18nLint(context, options, 'stdin');\n```\n\nThis allows more meaningful output when the reporters print a filename.\n\n#### Options\n\nOptions are passed as an object, as the second parameter to `i18n-lint`.\n\n##### `templateDelimiters`\n###### type: `Array`, default: `[]`\n\nSpecify the start and end template delimiters which the source files use.  For example,\nwhen linting EJS files:\n\n```javascript\n  I18nLint('file.ejs', {\n    templateDelimiters: ['<%', '%>']\n  });\n```\n\n##### `attributes`\n###### type: `Array`, default: `['alt', 'placeholder', 'title']`\n\nSpecify which HTML attributes to check when searching for hardcoded strings.\n\n##### `ignoreTags`\n###### type: `Array`, default: `['style', 'script', 'pre', 'code']`\n\nAn array of tags which should be ignored when searching for hardcoded strings.\n\n#### Using Reporters\n\nWhen using `i18n-lint` as a library, you can still use the reporters:\n\n```javascript\nconsole.log(I18nLint.reporters);\n// {\n//  default: [Function]\n// }\n\nvar reporter = I18nLint.reporters.default;\nvar errors = I18nLint('file.html', {});\n\nreporter(errors);\n```\n\nThere are currently 3 built-in reporters: `default`, `unix` and `json`.\n\nTo use other reporters, simply require them:\n\n```javascript\nvar I18nLint = require('i18n-lint');\nvar reporter = require('i18n-lint-awesome-reporter');\n\nreporter(I18nLint('file.html', {}));\n```\n\n#### Error Format\n\n```javascript\n{\n  file: '', // string, file which contains the errors,\n  error: {\n    id: String, // usually '(error)'\n    code: String, // warning code (see Warning Numbers)\n    reason: String, // message describing the error\n    evidence: RegExp, // with the offending text in match groups\n    line: Number, // line number of the error\n    character: Number, // column where evidence begins\n    scope: String // where the error was found\n  }\n}\n```\n\n### Grunt\n\nThere is a grunt task which wraps `i18n-lint`'s functionality, which\ncan be found at <https://github.com/jwarby/grunt-i18n-lint>.\n\n## Warning Numbers\n\n- `W001`: hardcoded text node found\n- `W002`: hardcoded attribute value found\n\n## Contributing\n\nSee [CONTRIBUTING.md](https://github.com/jwarby/i18n-lint/blob/master/CONTRIBUTING.md).\n\n### Running Tests\n\n- `npm test`\n  - lints JS files in `bin/`, `lib/` and `test/`\n  - runs [`mocha`](http://mochajs.org) test suite\n\n#### Generate Code Coverage Report\n\n- `npm run-script coverage`\n  - coverage is output to a `./coverage` directory\n\n## Release History\n\n`i18n-lint` follows [SemVer](http://semver.org/spec/v2.0.0.html) rules for version numbers.\n\n~~No releases yet~~\n\n## License\n\nCopyright (c) 2015 James Warwood.  Licensed under the MIT license.\n\n## Authors\n\nSee [AUTHORS.txt](https://github.com/jwarby/i18n-lint/blob/master/AUTHORS.txt).\n## Acknowledgements\n\n- CLI app scaffolding from <https://github.com/Hypercubed/generator-commander>\n","readmeFilename":"README.md","_id":"i18n-lint@0.0.1","_shasum":"1f6715e85fa31391f587462953d3550482a4209b","_from":"git://github.com/jwarby/i18n-lint.git","_resolved":"git://github.com/jwarby/i18n-lint.git#0a06373c0d880047ad680239c103d60ed414efc1"}