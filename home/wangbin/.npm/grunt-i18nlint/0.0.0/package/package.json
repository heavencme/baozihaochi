{"name":"grunt-i18nlint","version":"0.0.0","description":"Find hardcoded, untranslated strings in HTML and template source files","homepage":"https://github.com/jwarby/grunt-i18nlint","repository":{"type":"git","url":"git+https://github.com/jwarby/grunt-i18nlint.git"},"author":{"name":"James Warwood","email":"james.duncan.1991@googlemail.com","url":"https://github.com/jwarby"},"contributors":[],"keywords":["gruntplugin","i18n","hardcoded","untranslated","translate","strings","i18n-lint"],"main":"Gruntfile.js","engines":{"node":">= 0.8.0"},"license":"MIT","devDependencies":{"grunt":"~0.4.2","grunt-contrib-clean":"^0.6.0","grunt-contrib-jshint":"^0.11.0","grunt-contrib-nodeunit":"^0.4.1","jshint-stylish":"^2.0.1","load-grunt-tasks":"^3.1.0"},"scripts":{"test":"grunt test"},"bugs":{"url":"https://github.com/jwarby/grunt-i18nlint/issues"},"dependencies":{"chalk":"^1.1.0","i18n-lint":"git://github.com/jwarby/i18n-lint.git"},"gitHead":"6b398f775c8ca881a16f45a3cb94c5b79ee11e20","readme":"# grunt-i18nlint [![GitHub version](https://badge.fury.io/gh/jwarby%2Fgrunt-i18nlint.svg)](http://badge.fury.io/gh/jwarby%2Fgrunt-i18nlint)\n\n[![Build Status](https://secure.travis-ci.org/jwarby/grunt-i18nlint.png?branch=master)](https://travis-ci.org/jwarby/grunt-i18nlint)\n[![Dependency Status](https://david-dm.org/jwarby/grunt-i18nlint.svg?style=flat)](https://david-dm.org/jwarby/grunt-i18nlint)\n[![devDependency Status](https://david-dm.org/jwarby/grunt-i18nlint/dev-status.svg?style=flat)](https://david-dm.org/jwarby/grunt-i18nlint#info=devDependencies)\n\n> An opinionated Grunt task for finding hardcoded, untranslated strings in HTML and template source files\n\n![grunt-i18nlint screenshot](screenshot.png)\n\n## Getting Started\nThis plugin requires Grunt.\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install jwarby/grunt-i18nlint --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-i18nlint');\n```\n\n## The \"i18nlint\" task\n\nThe task assumes that your translation keys are similar in form to `'my.amazing.key'`.  The task can be used to\ndetect potentially hardcoded strings in element text nodes, and optionally from a list of HTML attributes (think\n`alt`, `title`, etc.).\n\n### Overview\nIn your project's Gruntfile, add a section named `i18nlint` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  i18nlint: {\n    options: {\n      // Task-specific options go here.\n    },\n    your_target: {\n      // Target-specific file lists and/or options go here.\n    },\n  },\n})\n```\n\n### Options\n\n#### options.attributes\nType: `Array`\nDefault value: `['alt', 'title']`\n\nAn array of HTML attributes which should be checked for hardcoded strings.  To disable attribute checking, set this to an empty array or\na falsy value.\n\n#### options.ignoreTags\nType: `Array`\nDefault value `['script', 'style']`\n\nAn array of HTML elements to ignore when searching for hardcoded strings.\n\n#### options.templateDelimiters\nType: `Array`\nDefault value: `[]`\n\nAn array which is to contain the start and end delimiters of the templates to be scanned.  Content within template delimiters is ignored.\n\n##### Examples\n\n###### EJS\n\n```js\ngrunt.initConfig({\n  i18nlint: {\n    options: {\n      templateDelimiters: ['<%', '%>']\n    },\n    src: 'myproject/**/*.ejs'\n  }\n});\n```\n\n###### Mustache-like\n\n```js\ngrunt.initConfig({\n  i18nlint: {\n    options: {\n      templateDelimiters: ['{{', '}}']\n    },\n    src: [\n      'mymodule1/**/*.hbs',\n      'mymodule2/**/*.hbs'\n    ]\n  }\n});\n```\n\n#### options.reporter\nType: `String` or `Function`\nDefault value: `i18nlint.reporters.default`\n\n- Set the i18n-lint reporter to use when outputting linting results.  If a function is provided, it will be called for each input file, with an array\n  containing the errors for found for the file.\n- If a string is provided, it must be a valid path or module name that can be `require`'d, and required file must export\n  a `reporter` property.  The `reporter` property should be a function as described above\n\nSee the [i18n-lint Documentation](https://jwarby.github.io/i18n-lint) or visit [i18n-lint on GitHub](https://github.com/jwarby/i18n-lint)\nfor more information on reporters and error object descriptions.\n\n#### options.force\nType: `Boolean`\nDefault value: `false`\n\nForce Grunt to carry on running even if the task fails.\n\n### Usage Examples\n\n#### Default Options\nIn this example, the default options are used, which means the task will check text nodes, `alt` attributes and `title` attributes:\n\n```js\ngrunt.initConfig({\n  i18nlint: {\n    src: '**/*.html'\n  },\n})\n```\n\n#### Custom Options\nIn this example, attribute checking is disabled, and EJS templating is used:\n\n```js\ngrunt.initConfig({\n  i18nlint: {\n    options: {\n      templateDelimiters: ['<%', '%>'],\n      attributes: null\n    },\n    src: 'test/fixtures/*.ejs'\n  }\n})\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Bugs and Feature Requests\n\nPlease raise all bugs and feature requests on the [issue tracker](https://github.com/jwarby/grunt-i18nlint/issues).\n\n## Release History\n_(Nothing yet)_\n\n## License\nCopyright (c) 2015 James Warwood. Licensed under the MIT license.\n","readmeFilename":"README.md","_id":"grunt-i18nlint@0.0.0","_shasum":"a31b49a16a164946a54cc7a39897795b299c8fed","_from":"jwarby/grunt-i18nlint","_resolved":"git://github.com/jwarby/grunt-i18nlint.git#6b398f775c8ca881a16f45a3cb94c5b79ee11e20"}