{
  "manifest": {
    "name": "grunt-mocha-istanbul",
    "version": "5.0.2",
    "description": "Almost config-free Istanbul code coverage reporter for Mocha usage in Grunt",
    "peerDependencies": {
      "grunt": ">=0.4.0"
    },
    "devDependencies": {
      "grunt": "^1.0.1",
      "mocha": "^3.0.1",
      "istanbul": "1.1.0-alpha.1",
      "babel-cli": "^6.9.0",
      "babel-preset-es2015": "^6.13.0",
      "isparta": "^4.0.0"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/pocesar/grunt-mocha-istanbul.git"
    },
    "scripts": {
      "test": "grunt"
    },
    "keywords": [
      "grunt",
      "gruntplugin",
      "mocha",
      "istanbul",
      "test",
      "coverage",
      "coveralls"
    ],
    "main": "tasks/index.js",
    "license": "MIT",
    "_registry": "npm",
    "_loc": "/home/wangbin/.cache/yarn/v1/npm-grunt-mocha-istanbul-5.0.2-23929a8b3f45a66c5fab1f6146e62b58418b7882/package.json",
    "readmeFilename": "README.md",
    "readme": "[![Dependency Status](https://david-dm.org/pocesar/grunt-mocha-istanbul.png?theme=shields.io)](https://david-dm.org/pocesar/grunt-mocha-istanbul)\n[![Build Status](https://travis-ci.org/pocesar/grunt-mocha-istanbul.svg?branch=master)](https://travis-ci.org/pocesar/grunt-mocha-istanbul)\n\n[![NPM](https://nodei.co/npm/grunt-mocha-istanbul.png?downloads=true&stars=true)](https://nodei.co/npm/grunt-mocha-istanbul/)\n\n# grunt mocha istanbul task\n\n> [Mocha](https://mochajs.org) reporter to generate coverage report of [istanbul](http://gotwarlost.github.com/istanbul/) instrumented code, for grunt\n\n> This doesn't force you to use PhantomJS, or instrument code for server or client-side.\n\n## Getting Started\n\n1. Install needed dependencies using: `npm install grunt mocha istanbul --save-dev`\n2. Install this package using: `npm install grunt-mocha-istanbul --save-dev`\n3. Call inside `Gruntfile.js`: `grunt.loadNpmTasks('grunt-mocha-istanbul')`\n\n### Compatible tools\n\nAlthough it's intended for use with [Istanbul](https://github.com/gotwarlost/istanbul), you can freely\nuse this task with other command line compatible tool, by changing the `scriptPath` option, such as:\n\n* [Ibrik](https://github.com/Constellation/ibrik)\n* [Babel Istanbul](https://github.com/ambitioninc/babel-istanbul)\n* [Isparta](https://github.com/douglasduteil/isparta)\n\n```js\ngrunt.initConfig({\n    mocha_istanbul: {\n        target: {\n            options: {\n                scriptPath: require.resolve('coverage-tool/the/path/to/bin'), // usually in nameofcoveragelibrary/lib/cli\n            }\n        }\n    }\n});\n```\n\n#### Running ES2015+ tests with ES2015+ sources (through Babel-CLI)\n\nBefore anything, install babel required stuff.\n\n```\nnpm install babel-cli babel-presets-2015 babel-register\n```\n\nDefine your .babelrc file on the same level as Gruntfile.js\n\n```json\n{\n    \"presets\": [\"es2015\"]\n}\n```\n\nThen you'll need to use Isparta, until Istanbul 1.0 is released. (or you can use 1.0.0-alpha.2)\n\n```js\n{\n    mocha_istanbul: {\n        src: 'test',\n        options: {\n            scriptPath: require.resolve('isparta/lib/cli'),\n            nodeExec: require.resolve('.bin/babel-node') // for Windows, you MUST use .bin/babel-node.cmd instead\n            mochaOptions: ['--compilers', 'js:babel-register'], // if you are writing your tests with ES2015+ as well\n        }\n    }\n}\n```\n\nNOTE: for some unknown reason, using babel-node as nodeExec, with `print` option makes it fail.\n\n### Usage Examples\n\nMost of the options that you pass to mocha is available in `options`:\n\n```js\nmodule.exports = function(grunt){\n    grunt.initConfig({\n        mocha_istanbul: {\n            coverage: {\n                src: 'test', // a folder works nicely\n                options: {\n                    mask: '*.spec.js'\n                }\n            },\n            coverageSpecial: {\n                src: ['testSpecial/*/*.js', 'testUnique/*/*.js'], // specifying file patterns works as well\n                options: {\n                    coverageFolder: 'coverageSpecial',\n                    mask: '*.spec.js',\n                    mochaOptions: ['--harmony','--async-only'], // any extra options\n                    istanbulOptions: ['--harmony','--handle-sigint']\n                }\n            },\n            coveralls: {\n                src: ['test', 'testSpecial', 'testUnique'], // multiple folders also works\n                options: {\n                    coverage:true, // this will make the grunt.event.on('coverage') event listener to be triggered\n                    check: {\n                        lines: 75,\n                        statements: 75\n                    },\n                    root: './lib', // define where the cover task should consider the root of libraries that are covered by tests\n                    reportFormats: ['cobertura','lcovonly']\n                }\n            }\n        },\n        istanbul_check_coverage: {\n          default: {\n            options: {\n              coverageFolder: 'coverage*', // will check both coverage folders and merge the coverage results\n              check: {\n                lines: 80,\n                statements: 80\n              }\n            }\n          }\n        }\n\n    });\n\n    grunt.event.on('coverage', function(lcovFileContents, done){\n        // Check below on the section \"The coverage event\"\n        done();\n    });\n\n    grunt.loadNpmTasks('grunt-mocha-istanbul');\n\n    grunt.registerTask('coveralls', ['mocha_istanbul:coveralls']);\n    grunt.registerTask('coverage', ['mocha_istanbul:coverage']);\n};\n```\n\nIf there's a `mocha.opts` file inside the first `src` folder or file defined, it will warn if you are overwriting any options.\n\nCoverage is written to `coverage` folder by default, in the same level as the `Gruntfile.js`\n\nThe `check` will fail the build if the thresholds are not met. It's a great possibility for CI-builds.\n\n### Options\n\nMochas parameters, check [https://mochajs.org/#usage](https://mochajs.org/#usage)\n\n### Mocha options\n\n### options.require\n\nType: `Array`\n\nDefault Value: `[]`\n\n### options.ui\n\nType: `Boolean`\n\nDefault Value: `false`\n\n### options.globals\n\nType: `Array`\n\nDefault Value: `[]`\n\n### options.reporter\n\nType: `String`\n\nDefault Value: `false`\n\n### options.timeout\n\nType: `Number`\n\nDefault Value: `false`\n\n### options.slow\n\nType: `Boolean`\n\nDefault Value: `false`\n\n### options.grep\n\nType: `String`\n\nDefault Value: `false`\n\n### options.recursive\n\nType: `Boolean`\n\nDefault Value: `false`\n\n### options.noColors\n\nType: `Boolean`\n\nDefault Value: `false`\n\n### options.nodeOptions\n\nType: `Array`\n\nDefault Value: `false`\n\nAn array of strings, any additional node executable parameters, manually set.\n\nEg.: `nodeOptions: ['--throw-deprecation', '--require', 'some/module']`\n\n### options.mask\n\nType: `String`\n\nDefault Value: `false`\n\nThe mask for the tests to be ran. By default, mocha will execute the `test` folder and all test files.\nWill override any files specified in `src` and instead use the mask on those files' folders.\n\n### options.mochaOptions\n\nType: `Array`\n\nDefault Value: `false`\n\nAn array of strings, any additional mocha parameters, manually set.\n\nEg.: `mochaOptions: ['--harmony', '-s', '100']`\n\n### Istanbul options\n\n### options.excludes\n\nType: `Array`\n\nDefault Value: `false`\n\nSetting this exclude files from coverage report, check `istanbul help cover`. You may use glob matching in here.\n\n### options.includes\n\nType: `Array`\n\nDefault Value: `false`\n\nSetting this includes only those files in the coverage report, check `istanbul help cover`. You may use glob matching in here.\n\n### options.istanbulOptions\n\nType: `Array`\n\nDefault Value: `false`\n\nAn array of strings, any additional istanbul parameters, manually set.\n\nEg.: `istanbulOptions: ['--harmony', '--handle-sigint', 'some=value', '-s', 'value']`\n\n### options.coverageFolder\n\nType: `String`\n\nDefault Value: `'coverage'`\n\nName of the output of the coverage folder\n\n#### options.reportFormats\n\nType: `Array`\n\nDefault Value: `['lcov']`\n\nName of report formats. You can specify more than one. If you intend to use the `coverage` option to\n`true` or do any checks, you must add: `['yourformat','lcovonly']`, since it's needed for the `lcov.info`\nfile to be created.\n\n[Supported formats](https://github.com/gotwarlost/istanbul#the-report-command):\n\n> html - produces a bunch of HTML files with annotated source code\n\n> lcovonly - produces an lcov.info file\n\n> lcov - produces html + lcov files. This is the default format\n\n> cobertura - produces a cobertura-coverage.xml file for easy Hudson integration\n\n> text-summary - produces a compact text summary of coverage, typically to console\n\n> text - produces a detailed text table with coverage for all files\n\n> teamcity - produces service messages to report code coverage to TeamCity\n\n### options.root\n\nType: `String`\n\nDefault Value: `false`\n\nThe root path to look for files to instrument, defaults to `.`. Can help to exclude directories that are not\npart of the code whose coverage should be checked.\n\n### options.print\n\nType: `String`\n\nDefault Value: `false`\n\nThe type of report to print to console. Can be one of 'summary', 'detail', 'both', or 'none'. By\n\nDefault, Istanbul will print the 'summary' report.\n\n### Task options\n\n### options.scriptPath\n\nType: `String`\n\nDefault Value: `'istanbulPath'`\n\nAllows to override the default istanbul path to use another coverage library, such as [ibrik](https://www.npmjs.com/package/ibrik).\nNeed to set the full path to the bin (script that accepts stdin arguments) and is compatible with `cover`.\n\n### options.coverage\n\nType: `Boolean`\n\nDefault Value: `false`\n\nSetting this to `true` **makes the task emit a grunt event `coverage`**, that will contain the lcov data from\nthe file, containing the following callback `function(lcovcontent, done)`, and **you must manually call\n`done()` when you are finished, else the grunt task will HANG, and won't allow any other tasks to finish**.\n[See more information below](#the-coverage-event)\n\n### options.dryRun\n\nType: `Boolean`\n\nDefault Value: `false`\n\nSpits out the command line that would be called, just to make sure everything is alright\n\n### options.nodeExec\n\nType: `String`\n\nDefault Value: `process.execPath`\n\nSets the node executable that will invoke Istanbul and Mocha. Useful for setting something else than node, like `babel-node`\n\n### options.cwd\n\nType: `String`\n\nDefault Value: `process.cwd()`\n\nSets the current working directly. Note that changing this might have unexpected results, since the plugin and Grunt expects\nto be working on the same level of `Gruntfile.js`\n\n### options.quiet\n\nType: `Boolean`\n\nDefault Value: `false`\n\nSuppresses the output from Mocha and Istanbul\n\n### options.check.statements\n\nType: `Number`\n\nDefault Value: `false`\n\nNumber of statements threshold to consider the coverage valid\n\n### options.check.lines\n\nType: `Number`\n\nDefault Value: `false`\n\nNumber of lines threshold to consider the coverage valid\n\n### options.check.branches\n\nType: `Number`\n\nDefault Value: `false`\n\nNumber of branches threshold to consider the coverage valid\n\n### options.check.functions\n\nType: `Number`\n\nDefault Value: `false`\n\nNumber of functions threshold to consider the coverage valid\n\n### The coverage event\n\nWhen you set the option `coverage` to `true`, you'll receive the `coverage/lcov.info` file contents:\n\n```js\ngrunt.event.on('coverage', function(lcov, done){\n    console.log(lcov);\n    done(); // or done(false); in case of error\n});\n```\n\nThis is mainly useful so you can send it to, for example, coveralls (using [coveralls](https://github.com/nickmerwin/node-coveralls)):\n\n```js\ngrunt.event.on('coverage', function(lcov, done){\n    require('coveralls').handleInput(lcov, function(err){\n        if (err) {\n            return done(err);\n        }\n        done();\n    });\n});\n```\n\nThis way, Travis-CI can send the Istanbul generated LCOV directly to Coveralls.io website in this example, but you could\ncreate any transform for Jenkins, TeamCity, Hudson, etc.\n\n## LICENSE\n\nMIT\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2013-2016 Paulo Cesar\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/grunt-mocha-istanbul/-/grunt-mocha-istanbul-5.0.2.tgz#23929a8b3f45a66c5fab1f6146e62b58418b7882",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/grunt-mocha-istanbul/-/grunt-mocha-istanbul-5.0.2.tgz",
    "hash": "23929a8b3f45a66c5fab1f6146e62b58418b7882",
    "registry": "npm"
  },
  "registry": "npm",
  "hash": "23929a8b3f45a66c5fab1f6146e62b58418b7882"
}