{
  "manifest": {
    "name": "rewire",
    "version": "3.0.2",
    "description": "Easy dependency injection for node.js unit testing",
    "keywords": [
      "dependency",
      "injection",
      "mock",
      "shim",
      "module",
      "unit",
      "test",
      "leak",
      "inspect",
      "fake",
      "require"
    ],
    "author": {
      "name": "Johannes Ewald",
      "email": "mail@johannesewald.de"
    },
    "main": "lib/index.js",
    "homepage": "https://github.com/jhnns/rewire",
    "bugs": {
      "url": "https://github.com/jhnns/rewire/issues",
      "email": "mail@johannesewald.de"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/jhnns/rewire.git"
    },
    "devDependencies": {
      "coffee-script": "^1.8.0",
      "expect.js": "^0.3.1",
      "mocha": "^4.0.1"
    },
    "license": "MIT",
    "scripts": {
      "test": "mocha -R spec",
      "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha"
    },
    "dependencies": {
      "babel-core": "^6.26.0",
      "babel-plugin-transform-es2015-block-scoping": "^6.26.0"
    },
    "_registry": "npm",
    "_loc": "/home/wangbin/.cache/yarn/v1/npm-rewire-3.0.2-25e5413c4f1676eb3247d1884198b3a265408bbd/package.json",
    "readmeFilename": "README.md",
    "readme": "rewire\n======\n**Easy monkey-patching for node.js unit tests**\n\n[![](https://img.shields.io/npm/v/rewire.svg)](https://www.npmjs.com/package/rewire)\n[![](https://img.shields.io/npm/dm/rewire.svg)](https://www.npmjs.com/package/rewire)\n[![Dependency Status](https://david-dm.org/jhnns/rewire.svg)](https://david-dm.org/jhnns/rewire)\n[![Build Status](https://travis-ci.org/jhnns/rewire.svg?branch=master)](https://travis-ci.org/rewire/jhnns)\n[![Coverage Status](https://img.shields.io/coveralls/jhnns/rewire.svg)](https://coveralls.io/r/jhnns/rewire?branch=master)\n\nrewire adds a special setter and getter to modules so you can modify their behaviour for better unit testing. You may\n\n- inject mocks for other modules or globals like `process`\n- inspect private variables\n- override variables within the module.\n\n**Please note:** The current version of rewire is only compatible with CommonJS modules. See [Limitations](https://github.com/jhnns/rewire#limitations).\n\n<br>\n\nInstallation\n------------\n\n`npm install rewire`\n\n<br />\n\nIntroduction\n------------\n\nImagine you want to test this module:\n\n```javascript\n// lib/myModules.js\n// With rewire you can change all these variables\nvar fs = require(\"fs\"),\n    path = \"/somewhere/on/the/disk\";\n\nfunction readSomethingFromFileSystem(cb) {\n    console.log(\"Reading from file system ...\");\n    fs.readFile(path, \"utf8\", cb);\n}\n\nexports.readSomethingFromFileSystem = readSomethingFromFileSystem;\n```\n\nNow within your test module:\n\n```javascript\n// test/myModule.test.js\nvar rewire = require(\"rewire\");\n\nvar myModule = rewire(\"../lib/myModule.js\");\n```\n\nrewire acts exactly like require. With just one difference: Your module will now export a special setter and getter for private variables.\n\n```javascript\nmyModule.__set__(\"path\", \"/dev/null\");\nmyModule.__get__(\"path\"); // = '/dev/null'\n```\n\nThis allows you to mock everything in the top-level scope of the module, like the fs module for example. Just pass the variable name as first parameter and your mock as second.\n\n```javascript\nvar fsMock = {\n    readFile: function (path, encoding, cb) {\n        expect(path).to.equal(\"/somewhere/on/the/disk\");\n        cb(null, \"Success!\");\n    }\n};\nmyModule.__set__(\"fs\", fsMock);\n\nmyModule.readSomethingFromFileSystem(function (err, data) {\n    console.log(data); // = Success!\n});\n```\n\nYou can also set multiple variables with one call.\n\n```javascript\nmyModule.__set__({\n    fs: fsMock,\n    path: \"/dev/null\"\n});\n```\n\nYou may also override globals. These changes are only within the module, so you don't have to be concerned that other modules are influenced by your mock.\n\n```javascript\nmyModule.__set__({\n    console: {\n        log: function () { /* be quiet */ }\n    },\n    process: {\n        argv: [\"testArg1\", \"testArg2\"]\n    }\n});\n```\n\n`__set__` returns a function which reverts the changes introduced by this particular `__set__` call\n\n```javascript\nvar revert = myModule.__set__(\"port\", 3000);\n\n// port is now 3000\nrevert();\n// port is now the previous value\n```\n\nFor your convenience you can also use the `__with__` method which reverts the given changes after it finished.\n\n```javascript\nmyModule.__with__({\n    port: 3000\n})(function () {\n    // within this function port is 3000\n});\n// now port is the previous value again\n```\n\nThe `__with__` method is also aware of promises. If a thenable is returned all changes stay until the promise has either been resolved or rejected.\n\n```javascript\nmyModule.__with__({\n    port: 3000\n})(function () {\n    return new Promise(...);\n}).then(function () {\n    // now port is the previous value again\n});\n// port is still 3000 here because the promise hasn't been resolved yet\n```\n\n<br />\n\nLimitations\n-----------\n\n**Babel's ES module emulation**<br>\nDuring the transpilation step from ESM to CJS modules, Babel renames internal variables. Rewire will not work in these cases (see [#62](https://github.com/jhnns/rewire/issues/62)). Other Babel transforms, however, should be fine. Another solution might be switching to [babel-plugin-rewire](https://github.com/speedskater/babel-plugin-rewire).\n\n**Variables inside functions**<br>\nVariables inside functions can not be changed by rewire. This is constrained by the language.\n\n```javascript\n// myModule.js\n(function () {\n    // Can't be changed by rewire\n    var someVariable;\n})()\n```\n\n**Modules that export primitives**<br>\nrewire is not able to attach the `__set__`- and `__get__`-method if your module is just exporting a primitive. Rewiring does not work in this case.\n\n```javascript\n// Will throw an error if it's loaded with rewire()\nmodule.exports = 2;\n```\n\n**Globals with invalid variable names**<br>\nrewire imports global variables into the local scope by prepending a list of `var` declarations:\n\n```javascript\nvar someGlobalVar = global.someGlobalVar;\n```\n\nIf `someGlobalVar` is not a valid variable name, rewire just ignores it. **In this case you're not able to override the global variable locally**.\n\n**Special globals**<br>\nPlease be aware that you can't rewire `eval()` or the global object itself.\n\n\n<br />\n\nAPI\n---\n\n### rewire(filename: String): rewiredModule\n\nReturns a rewired version of the module found at `filename`. Use `rewire()` exactly like `require()`.\n\n### rewiredModule.&#95;&#95;set&#95;&#95;(name: String, value: *): Function\n\nSets the internal variable `name` to the given `value`. Returns a function which can be called to revert the change.\n\n### rewiredModule.&#95;&#95;set&#95;&#95;(obj: Object): Function\n\nTakes all enumerable keys of `obj` as variable names and sets the values respectively. Returns a function which can be called to revert the change.\n\n### rewiredModule.&#95;&#95;get&#95;&#95;(name: String): *\n\nReturns the private variable with the given `name`.\n\n### rewiredModule.&#95;&#95;with&#95;&#95;(obj: Object): Function&lt;callback: Function>\n\nReturns a function which - when being called - sets `obj`, executes the given `callback` and reverts `obj`. If `callback` returns a promise, `obj` is only reverted after the promise has been resolved or rejected. For your convenience the returned function passes the received promise through.\n\n<br />\n\nCaveats\n-------\n\n**Difference to require()**<br>\nEvery call of rewire() executes the module again and returns a fresh instance.\n\n```javascript\nrewire(\"./myModule.js\") === rewire(\"./myModule.js\"); // = false\n```\n\nThis can especially be a problem if the module is not idempotent [like mongoose models](https://github.com/jhnns/rewire/issues/27).\n\n**Globals are imported into the module's scope at the time of rewiring**<br>\nSince rewire imports all gobals into the module's scope at the time of rewiring, property changes on the `global` object after that are not recognized anymore. This is a [problem when using sinon's fake timers *after* you've called `rewire()`](http://stackoverflow.com/questions/34885024/when-using-rewire-and-sinon-faketimer-order-matters/36025128).\n\n**Dot notation**<br>\nAlthough it is possible to use dot notation when calling `__set__`, it is strongly discouraged in most cases. For instance, writing `myModule.__set__(\"console.log\", fn)` is effectively the same as just writing `console.log = fn`. It would be better to write:\n\n```javascript\nmyModule.__set__(\"console\", {\n    log: function () {}\n});\n```\n\nThis replaces `console` just inside `myModule`. That is, because rewire is using `eval()` to turn the key expression into an assignment. Hence, calling `myModule.__set__(\"console.log\", fn)` modifies the `log` function on the *global* `console` object.\n\n<br />\n\nwebpack\n-------\nSee [rewire-webpack](https://github.com/jhnns/rewire-webpack)\n\n<br />\n\nCoffeeScript\n------------\n\nGood news to all caffeine-addicts: rewire works also with [Coffee-Script](http://coffeescript.org/). Note that in this case CoffeeScript needs to be listed in your devDependencies.\n\n<br />\n\n## License\n\nMIT\n",
    "licenseText": "Copyright (c) 2012 Johannes Ewald\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/rewire/-/rewire-3.0.2.tgz#25e5413c4f1676eb3247d1884198b3a265408bbd",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/rewire/-/rewire-3.0.2.tgz",
    "hash": "25e5413c4f1676eb3247d1884198b3a265408bbd",
    "registry": "npm"
  },
  "registry": "npm",
  "hash": "25e5413c4f1676eb3247d1884198b3a265408bbd"
}