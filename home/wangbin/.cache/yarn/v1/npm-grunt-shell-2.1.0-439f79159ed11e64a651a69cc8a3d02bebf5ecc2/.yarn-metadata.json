{
  "manifest": {
    "name": "grunt-shell",
    "version": "2.1.0",
    "description": "Run shell commands",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/sindresorhus/grunt-shell.git"
    },
    "author": {
      "name": "Sindre Sorhus",
      "email": "sindresorhus@gmail.com",
      "url": "sindresorhus.com"
    },
    "engines": {
      "node": ">=4"
    },
    "scripts": {
      "test": "xo && grunt"
    },
    "files": [
      "tasks"
    ],
    "keywords": [
      "gruntplugin",
      "shell",
      "command",
      "cmd",
      "exec",
      "spawn",
      "child",
      "process",
      "cli"
    ],
    "dependencies": {
      "chalk": "^1.0.0",
      "npm-run-path": "^2.0.0"
    },
    "devDependencies": {
      "grunt": "^1.0.1",
      "grunt-cli": "^1.2.0",
      "xo": "*"
    },
    "peerDependencies": {
      "grunt": ">=0.4.0"
    },
    "xo": {
      "esnext": true
    },
    "_registry": "npm",
    "_loc": "/home/wangbin/.cache/yarn/v1/npm-grunt-shell-2.1.0-439f79159ed11e64a651a69cc8a3d02bebf5ecc2/package.json",
    "readmeFilename": "readme.md",
    "readme": "# grunt-shell [![Build Status](https://travis-ci.org/sindresorhus/grunt-shell.svg?branch=master)](https://travis-ci.org/sindresorhus/grunt-shell)\n\n> Run shell commands\n\nA good way to interact with other CLI tools. E.g. compiling Compass `compass compile` or get the current git branch `git branch`.\n\n**Use [Stack Overflow](https://stackoverflow.com/questions/tagged/gruntjs) for support questions.**\n\n---\n\n<p align=\"center\"><b>ðŸ”¥ Want to strengthen your core JavaScript skills and master ES6?</b><br>I would personally recommend this awesome <a href=\"https://ES6.io/friend/AWESOME\">ES6 course</a> by Wes Bos.</p>\n\n---\n\n\n## Install\n\n```\n$ npm install --save-dev grunt-shell\n```\n\n\n## Usage\n\n```js\nrequire('load-grunt-tasks')(grunt); // npm install --save-dev load-grunt-tasks\n\ngrunt.initConfig({\n\tshell: {\n\t\toptions: {\n\t\t\tstderr: false\n\t\t},\n\t\ttarget: {\n\t\t\tcommand: 'ls'\n\t\t},\n\t\tanother: 'ls ./src' // shorthand\n\t}\n});\n\ngrunt.registerTask('default', ['shell']);\n```\n\n\n## Examples\n\n### Run command\n\nCreate a folder named `test`.\n\n```js\ngrunt.initConfig({\n\tshell: {\n\t\tmakeDir: {\n\t\t\tcommand: 'mkdir test'\n\t\t}\n\t}\n});\n```\n\nThe `command` property supports templates:\n\n```js\ngrunt.initConfig({\n\ttestDir: 'test',\n\tshell: {\n\t\tmakeDir: {\n\t\t\tcommand: 'mkdir <%= testDir %>'\n\t\t}\n\t}\n});\n```\n\nYou can also supply a function that returns the command:\n\n```js\ngrunt.initConfig({\n\tshell: {\n\t\thello: {\n\t\t\tcommand: () => 'echo hello'\n\t\t}\n\t}\n});\n```\n\nWhich can also take arguments:\n\n```js\nmodule.exports = grunt => {\n\tgrunt.loadNpmTasks('grunt-shell');\n\tgrunt.initConfig({\n\t\tshell: {\n\t\t\tgreet: {\n\t\t\t\tcommand: greeting => 'echo ' + greeting\n\t\t\t}\n\t\t}\n\t});\n\tgrunt.registerTask('default', ['shell:greet:hello']);\n}\n```\n\n### Run command and display the output\n\nOutput a directory listing in your Terminal.\n\n```js\ngrunt.initConfig({\n\tshell: {\n\t\tdirListing: {\n\t\t\tcommand: 'ls'\n\t\t}\n\t}\n});\n```\n\n### Custom callback\n\nDo whatever you want with the output.\n\n```js\nfunction log(err, stdout, stderr, cb) {\n\tif (err) {\n\t\tcb(err);\n\t\treturn;\n\t}\n\n\tconsole.log(stdout);\n\tcb();\n}\n\ngrunt.initConfig({\n\tshell: {\n\t\tdirListing: {\n\t\t\tcommand: 'ls',\n\t\t\toptions: {\n\t\t\t\tcallback: log\n\t\t\t}\n\t\t}\n\t}\n});\n```\n\n### Option passed to the .exec() method\n\nRun a command in another directory. In this example we run it in a subfolder using the `cwd` (current working directory) option.\n\n```js\ngrunt.initConfig({\n\tshell: {\n\t\tsubfolderLs: {\n\t\t\tcommand: 'ls',\n\t\t\toptions: {\n\t\t\t\tstderr: false,\n\t\t\t\texecOptions: {\n\t\t\t\t\tcwd: 'tasks'\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n```\n\n### Multiple commands\n\nRun multiple commands by placing them in an array which is joined using `&&` or `;`. `&&` means run this only if the previous command succeeded. You can also use `&` to have the commands run concurrently (by executing all commands except the last one in a subshell).\n\n```js\ngrunt.initConfig({\n\tshell: {\n\t\tmultiple: {\n\t\t\tcommand: [\n\t\t\t\t'mkdir test',\n\t\t\t\t'cd test',\n\t\t\t\t'ls'\n\t\t\t].join('&&')\n\t\t}\n\t}\n});\n```\n\n\n## Config\n\n### command\n\n*Required*<br>\nType: `string` `Function`\n\nCommand to run or a function which returns the command. Supports underscore templates.\n\n*Command can be omitted by directly setting the target with the command.*\n\n### cwd\n\nType: `string`\n\nShortcut. Same as `options.execOptions.cwd` (see below).\n\n\n## Options\n\n### stdout\n\nType: `boolean`<br>\nDefault: `true`\n\nShow stdout in the terminal.\n\n### stderr\n\nType: `boolean`<br>\nDefault: `true`\n\nShow stderr in the terminal.\n\n### stdin\n\nType: `boolean`<br>\nDefault: `true`\n\nForward the terminal's stdin to the command.\n\n### failOnError\n\nType: `boolean`<br>\nDefault: `true`\n\nFail task if it encounters an error. Doesn't apply if you specify a `callback`.\n\n### stdinRawMode\n\nType: `boolean`<br>\nDefault: `false`\n\nSet `stdin` to [act as a raw device](https://nodejs.org/api/tty.html#tty_readstream_setrawmode_mode).\n\n### callback(err, stdout, stderr, cb)\n\nType: `Function`\n\nLets you override the default callback with your own.\n\n**Make sure to call the `cb` method when you're done.** Supply an error as the first argument to `cb` to print a warning and cause the task to fail.\n\n### preferLocal\n\nType: `boolean`<br>\nDefault: `true`\n\nExecute local binaries by name like [`$ npm run-script`](https://www.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/).\n\n### execOptions\n\nType: `Object`\n\nSpecify some options to be passed to the [.exec()](https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback) method:\n\n- `cwd` string *Current working directory of the child process*\n- `env` Object *Environment key-value pairs*\n- `setsid` boolean\n- `encoding` string *(Default: `'utf8'`)*\n- `timeout` number *(Default: `0`)*\n- `maxBuffer` number *(Default: `1000 * 1000 * 10` â†’ 10 MB)*\n- `killSignal` string *(Default: `'SIGTERM'`)*\n\n\n## License\n\nMIT Â© [Sindre Sorhus](https://sindresorhus.com)\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/grunt-shell/-/grunt-shell-2.1.0.tgz#439f79159ed11e64a651a69cc8a3d02bebf5ecc2",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/grunt-shell/-/grunt-shell-2.1.0.tgz",
    "hash": "439f79159ed11e64a651a69cc8a3d02bebf5ecc2",
    "registry": "npm"
  },
  "registry": "npm",
  "hash": "439f79159ed11e64a651a69cc8a3d02bebf5ecc2"
}