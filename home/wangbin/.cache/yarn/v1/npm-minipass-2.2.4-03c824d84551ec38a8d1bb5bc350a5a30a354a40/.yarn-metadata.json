{
  "manifest": {
    "name": "minipass",
    "version": "2.2.4",
    "description": "minimal implementation of a PassThrough stream",
    "main": "index.js",
    "dependencies": {
      "safe-buffer": "^5.1.1",
      "yallist": "^3.0.0"
    },
    "devDependencies": {
      "end-of-stream": "^1.4.0",
      "tap": "^10.7.0",
      "through2": "^2.0.3"
    },
    "scripts": {
      "test": "tap test/*.js --100",
      "preversion": "npm test",
      "postversion": "npm publish",
      "postpublish": "git push origin --all; git push origin --tags"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/isaacs/minipass.git"
    },
    "keywords": [
      "passthrough",
      "stream"
    ],
    "author": {
      "name": "Isaac Z. Schlueter",
      "email": "i@izs.me",
      "url": "http://blog.izs.me/"
    },
    "license": "ISC",
    "files": [
      "index.js"
    ],
    "_registry": "npm",
    "_loc": "/home/wangbin/.cache/yarn/v1/npm-minipass-2.2.4-03c824d84551ec38a8d1bb5bc350a5a30a354a40/package.json",
    "readmeFilename": "README.md",
    "readme": "# minipass\n\nA _very_ minimal implementation of a [PassThrough\nstream](https://nodejs.org/api/stream.html#stream_class_stream_passthrough)\n\n[It's very\nfast](https://docs.google.com/spreadsheets/d/1oObKSrVwLX_7Ut4Z6g3fZW-AX1j1-k6w-cDsrkaSbHM/edit#gid=0)\nfor objects, strings, and buffers.\n\nSupports pipe()ing (including multi-pipe() and backpressure\ntransmission), buffering data until either a `data` event handler or\n`pipe()` is added (so you don't lose the first chunk), and most other\ncases where PassThrough is a good idea.\n\nThere is a `read()` method, but it's much more efficient to consume\ndata from this stream via `'data'` events or by calling `pipe()` into\nsome other stream.  Calling `read()` requires the buffer to be\nflattened in some cases, which requires copying memory.  Also,\n`read()` always returns Buffers, even if an `encoding` option is\nspecified.\n\nThere is also no `unpipe()` method.  Once you start piping, there is\nno stopping it!\n\nIf you set `objectMode: true` in the options, then whatever is written\nwill be emitted.  Otherwise, it'll do a minimal amount of Buffer\ncopying to ensure proper Streams semantics when `read(n)` is called.\n\nThis is not a `through` or `through2` stream.  It doesn't transform\nthe data, it just passes it right through.  If you want to transform\nthe data, extend the class, and override the `write()` method.  Once\nyou're done transforming the data however you want, call\n`super.write()` with the transform output.\n\nFor an example of a stream that extends MiniPass to provide transform\ncapabilities, check out [minizlib](http://npm.im/minizlib).\n\n## USAGE\n\n```js\nconst MiniPass = require('minipass')\nconst mp = new MiniPass(options) // optional: { encoding }\nmp.write('foo')\nmp.pipe(someOtherStream)\nmp.end('bar')\n```\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/minipass/-/minipass-2.2.4.tgz#03c824d84551ec38a8d1bb5bc350a5a30a354a40",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/minipass/-/minipass-2.2.4.tgz",
    "hash": "03c824d84551ec38a8d1bb5bc350a5a30a354a40",
    "registry": "npm"
  },
  "registry": "npm",
  "hash": "03c824d84551ec38a8d1bb5bc350a5a30a354a40"
}