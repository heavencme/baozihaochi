{
  "manifest": {
    "name": "knex-migrator",
    "version": "3.1.6",
    "description": "Database migrations with knex.",
    "keywords": [
      "ghost",
      "migration",
      "knex",
      "knex-migrations",
      "knex migration",
      "knex migrations",
      "bookshelf migration",
      "bookshelf"
    ],
    "repository": {
      "type": "git",
      "url": "git@github.com:TryGhost/knex-migrator.git"
    },
    "bugs": {
      "url": "https://github.com/TryGhost//knex-migrator/issues"
    },
    "author": {
      "name": "Ghost Foundation",
      "email": "hello@ghost.org",
      "url": "https://ghost.org"
    },
    "main": "lib",
    "license": "MIT",
    "scripts": {
      "lint": "eslint bin lib",
      "test": "yarn lint && LEVEL=fatal _mocha --require test/utils.js --report lcovonly -- test/*_spec.js",
      "coverage": "nyc --reporter=lcov _mocha --require test/utils.js -- test/*_spec.js"
    },
    "bin": {
      "knex-migrator": "./bin/knex-migrator",
      "knex-migrator-init": "./bin/knex-migrator-init",
      "knex-migrator-health": "./bin/knex-migrator-health",
      "knex-migrator-migrate": "./bin/knex-migrator-migrate",
      "knex-migrator-reset": "./bin/knex-migrator-reset",
      "knex-migrator-rollback": "./bin/knex-migrator-rollback"
    },
    "engines": {
      "node": ">=6"
    },
    "dependencies": {
      "bluebird": "^3.4.6",
      "commander": "2.15.1",
      "compare-ver": "^2.0.2",
      "debug": "^2.2.0",
      "ghost-ignition": "2.9.2",
      "knex": "^0.14.2",
      "lodash": "^4.16.4",
      "moment": "^2.19.3",
      "nconf": "^0.10.0",
      "resolve": "1.7.1"
    },
    "files": [
      "bin",
      "lib",
      "logging.js"
    ],
    "devDependencies": {
      "eslint": "4.19.1",
      "grunt": "1.0.2",
      "grunt-release": "0.14.0",
      "mocha": "3.1.2",
      "nyc": "11.7.1",
      "should": "11.1.1",
      "sinon": "1.17.6"
    },
    "optionalDependencies": {
      "mysql": "^2.11.1",
      "sqlite3": "^4.0.0"
    },
    "_registry": "npm",
    "_loc": "/home/wangbin/.cache/yarn/v1/npm-knex-migrator-3.1.6-480928a060595045acd06253e245920a7bc9544b/package.json",
    "readmeFilename": "README.md",
    "readme": "# knex-migrator\n\n> Database migration tool for [knex](https://github.com/tgriesser/knex).\n\n## Supported Databases\n\n### MySQL, Sqlite3\n\n**Note: Replicas are unsupported, because knex doesn't support them.**\n\n## Features\n\n- Locks for concurrency\n- Full rollback to latest version\n- Full CLI and JS API\n- Hooks\n- Differentiation between database initialisation and migration\n    - Support for a database schema, [like we use in Ghost](https://github.com/TryGhost/Ghost/blob/1.16.2/core/server/data/schema/schema.js)\n- Support for database creation \n\n## Other migration tools\n\n##### Knex Migrations\n\nRead [here](https://github.com/TryGhost/Ghost/issues/7489) what the major downsides of knex migrations are.\n\n##### DB-Migrate\n\nLatest version [uses autocommit](https://github.com/db-migrate/mysql/blob/v1.1.10/index.js#L25) to handle database migrations, which **does not solve** the problem of DDL/DML statements in MySQL.\nIf you are interested in why, continue reading [here](https://github.com/tgriesser/knex/issues/2290).\n\nFurthermore they don't support a full set of features e.g. full atomic rollbacks.\n\n## Installation\n```\nnpm install -g knex-migrator\nnpm install knex-migrator --save\nyarn add knex-migrator\n```\n\n## MigratorConfig\n`knex-migrator` requires a config file.\nPlease provide a file named `MigratorConfig.js` in your project root.\n\n\n```\nmodule.exports = {\n    database: {\n        client: 'mysql',\n        connection: {\n            host: '127.0.0.1',\n            user: 'user',\n            password: 'password',\n            charset: 'utf8',\n            database: 'ghost'\n        }\n    },\n    migrationPath: process.cwd() + '/core/server/data/migrations',\n    currentVersion: 'your-current-database/project-version',\n    subfolder: 'upgrades'  [default: versions]\n}\n```\n\n```\nmodule.exports = {\n    database: {\n        client: 'sqlite3',\n        connection: {\n            filename: 'path/to/your.db'\n        }\n    },\n    migrationPath: process.cwd() + '/core/server/data/migrations',\n    currentVersion: 'your-current-database-version'\n}\n```\n\nNote that if you are using the [Ghost-CLI](https://github.com/TryGhost/Ghost-CLI) the `migrationPath` parameter should point to the `current` directory: \n```js\nmigrationPath: process.cwd() + '/current/core/server/data/migrations'\n```\n\n## API\n\n### CLI\n\n```\nknex-migrator help\nknex-migrator health [shows the database health]\n\nknex-migrator init [initialises your database based on your init scripts]\nknex-migrator init --skip 1\nknex-migrator init --only 1\nknex-migrator init --mgpath <path-to-MigratorConfig.js>\n\nknex-migrator migrate [migrates your database to latest state, rolls back if an error happens]\nknex-migrator migrate --v 1.2\nknex-migrator migrate --v 1.2 --force [doesn't matter which current version you are on, we force executing the version]\nknex-migrator migrate --init [avoids running `init`, a combined command]\nknex-migrator migrate --init --mgpath <path-to-MigratorConfig.js>\n\nknex-migrator reset [resets your database]\nknex-migrator reset --force [resets your database and ignores the migration lock]\n\nknex-migrator rollback\n```\n\n### JS\n```\nvar KnexMigrator = require('knex-migrator');\nvar knexMigrator = new KnexMigrator({\n    knexMigratorFilePath: 'path-to-migrator-config-file' [optional]\n    // or\n    knexMigratorConfig: { ... } [optional]\n});\n\n// check your database health\nknexMigrator.isDatabaseOK()\n  .then(function() {\n     // database is OK\n  })\n  .catch(function(err) {\n     // err contains a specific code, based on that code you decide (err.code)\n     \n     // database is not initialised?\n     knexMigrator.init();\n     \n     // database is not migrated?\n     knexMigrator.migrate();     \n  });\n\n```\n\n## Hooks\nKnex-migrator offers you to hook into the process of executing scripts.\nThe hooks won't work for initialisation right now.\nAll hooks are optional. \nHooks need to live in the `migrationPath` you have offered.\n\nYou can disable the hooks passing:\n```\nknexMigrator.init({\n  disableHooks: true,           [optional] \n  noScripts: true | false       [optional]\n});\n```\n\nThe folder name must be `hooks` - this is not configureable right now.\nPlease create an index.js file to export your functions.\n\n|hook|description|\n|---|---|\n|before|is called before anything happens|\n|beforeEach| is called before each migration script|\n|after|is called after everything happened|\n|afterEach|is called after each migration script|\n|shutdown|is called before the migrator shuts down [no database access]|\n\n\nindex.js\n```\nexports.before = require('./before'); \nexports.beforeEach = = require('./before');\n```\n\n## Migration Folder Example\n- hooks\n  - migrate\n    - before.js\n    - index.js\n  - init\n    - after.js\n    - index.js\n- init\n  - 1-create-tables.js\n  - 2-seed.js\n- versions\n  - 1.0\n    - 1-update-user.js\n    - 2-change-permissions.js\n\n## Migration Files\n\n### Transactions\nYou can enable transactions per migration script.\n\n```\nmodule.exports.config = {\n  transaction: true\n}\n```\n\n\n### Example\n```\nvar Promise = require('bluebird');\nmodule.exports.up = function(options) {\n  var connection = options.connection;\n  \n  ... \n  \n  return Promise.resolve();\n};\n\nmodule.exports.down = function(options) {\n  var connection = options.connection;\n  \n  ... \n  \n  return Promise.resolve();\n}\n```\n\n#### Important\nDon't mix DDL/DML statements in a migration script. In MySQL DDL statements use implicit commits. Furthermore it's highly recommended to write both the `up` and the `down` function to ensure a **full** rollback.\n\n\n## Knowledge Base\n\n### Shutdown during migrations\nIf your process dies while migrations are running, knex-migrator won't be able to release the migration lock.\nTo release to lock you can run `knex-migrator rollback`. **But** it's recommended to check your database first to see in which state it is.\nYou can check the tables `migrations` and `migration_lock`. The rollback will rollback any migrations which were executed on your current project version.\n\n### Sqlite and Locks\n\nSqlite does **not** support read locks by default. That's why locks/concurrency is not supported atm.\n\n## Testing\n\n`npm test`\n`NODE_ENV=testing-mysql npm test`\n\n## Debug\n`DEBUG=knex-migrator:* knex-migrator health`\n\n# Copyright & License\n\nCopyright (c) 2017-2018 Ghost Foundation - Released under the [MIT license](LICENSE).\n",
    "licenseText": "Copyright (c) 2016-2018 Ghost Foundation\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/knex-migrator/-/knex-migrator-3.1.6.tgz#480928a060595045acd06253e245920a7bc9544b",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/knex-migrator/-/knex-migrator-3.1.6.tgz",
    "hash": "480928a060595045acd06253e245920a7bc9544b",
    "registry": "npm"
  },
  "registry": "npm",
  "hash": "480928a060595045acd06253e245920a7bc9544b"
}